#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright 2014 Spotify AB
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
from __future__ import print_function
from optparse import OptionParser

import sys
import subprocess
from mlockexec import util
from mlockexec import file_locker
import lockfile

# Parse options

parser = OptionParser()
parser.add_option("-m", "--max-memory", dest="maxmemory",
                  help="maximum amount of memory to lock.", metavar="MEMORY", action="store")
parser.add_option("-g", "--glob", dest="glob",
                  help="glob expression for files to lock", metavar="GLOB", action="append")
parser.add_option("-l", "--lock-file", dest="lockfile",
                  help="lockfile to use for coordinating multiple instances of mlockexec",
                  metavar="LOCKFILE", action="store")
parser.add_option("-v", "--verbose", dest="verbose",
                  help="Print verbose information", action="store_true")

(options, args) = parser.parse_args()

if not options.maxmemory:
    raise Exception("--max-memory must be specified")

if len(args) <= 0:
    raise Exception("No command specified")

maxmemory = util.parse_memory(options.maxmemory)

files = util.get_files(options.glob)
total_size = util.total_size(files)

if total_size > maxmemory:
    raise Exception("total size is %d but maxmemory is only %d" % (total_size, maxmemory))

# Lock all the files
mlocked_files = []

def mlock_files():
    for f in files:
        if options.verbose:
            print("locking %s" % f, file=sys.stderr)
        mlocked_files.append(file_locker.FileLocker(f))
    if options.verbose:
        print("locked %d files in %d bytes" % (len(files), total_size), file=sys.stderr)

if options.lockfile is not None:
    lock = lockfile.FileLock(options.lockfile)
    if options.verbose and lock.is_locked():
        print("waiting for lockfile: %s" % (options.lockfile), file=sys.stderr)
    with lock:
        mlock_files()
else:
    mlock_files()


# Start the actual wanted command
sys.exit(subprocess.Popen(args).wait())

